using Core.Helpers.Logger.Interfaces;
using System;

namespace Core.Helpers.Logger
{
    /// <summary> An active logger for classes that can't inherit <see cref="LoggerFluency"/>. </summary>
    public class ActiveLogger : LoggerFluency, IActiveLogger
    {
        #region Constructors

        /// <summary> Creates a new active logger. </summary>
        /// <param name="logCategory"> The category of logs generated by this instance. </param>
        /// <param name="loggers"> Instances of loggers. </param>
        public ActiveLogger(string logCategory, params IConfiguredLogger[] loggers)
            : base(logCategory, loggers)
        {
        }

        #endregion Constructors
        #region Methods: Logging

        /// <summary> Creates a log entry of the "Trace" level for the current log category. </summary>
        /// <param name="message"> A message to supplement the log with. </param>
        public void Trace(string message) => LogTrace(message);

        /// <summary> Creates a log entry of the "Debug" level for the current log category. </summary>
        /// <param name="message"> A message to supplement the log with. </param>
        public void Debug(string message) => LogDebug(message);

        /// <summary> Creates a log entry of the "Info" level for the current log category. </summary>
        /// <param name="message"> A message to supplement the log with. </param>
        public void Info(string message) => LogInfo(message);

        /// <summary> Creates a log entry of the "Warn" level for the current log category. </summary>
        /// <param name="message"> A message to supplement the log with. </param>
        public void Warn(string message) => LogWarn(message);

        /// <summary> Creates a log entry of the "Error" level for the current log category. </summary>
        /// <param name="message"> A message to supplement the log with. </param>
        /// <param name="exception"> An exception whose data to log. </param>
        public void Error(string message, Exception exception) => LogError(message, exception);

        /// <summary> Creates a log entry of the "Fatal" level for the current log category. </summary>
        /// <param name="message"> A message to supplement the log with. </param>
        /// <param name="exception"> An exception whose data to log. </param>
        public void Fatal(string message, Exception exception) => LogFatal(message, exception);

        #endregion Methods: Logging
    }
}