using Core.DataBase.Enumerations;
using Core.DataBase.Helpers.Interfaces;
using Core.DataBase.Objects.Interfaces;
using Core.DataBase.WarThunder.Enumerations.DataBase;
using Core.DataBase.WarThunder.Objects.Interfaces;
using Core.DataBase.WarThunder.Objects.Json;
using Core.DataBase.WarThunder.Objects.VehicleGameModeParameterSets;
using NHibernate.Mapping.Attributes;
using System.Collections.Generic;

namespace Core.DataBase.WarThunder.Objects
{
    /// <summary> A set of vehicle information pertaining to the economy. </summary>
    [Class(Table = ETable.VehicleEconomyData)]
    public class VehicleEconomyData : PersistentDeserialisedObjectWithIdAndVehicle, IVehicleEconomyData
    {
        #region Persistent Properties

        /// <summary> The vehicle's ID. </summary>
        [Id(Column = EColumn.Id, TypeType = typeof(long), Name = nameof(Id), Generator = EIdGenerator.HiLo)]
        public override long Id { get; protected set; }

        /// <summary> The amount of research required to unlock the vehicle. </summary>
        [Property()] public virtual int? UnlockCostInResearch { get; protected set; }

        /// <summary>
        /// The price of purchasing the vehicle with Silver Lions.
        /// Zero means that the vehicle cannot be bought for Silver Lions.
        /// </summary>
        [Property()] public virtual int PurchaseCostInSilver { get; protected set; }

        /// <summary> The price of purchasing the vehicle with Golden Eagles. </summary>
        [Property()] public virtual int? PurchaseCostInGold { get; protected set; }

        [Property()] public virtual int? PurchaseCostInGoldAsSquadronVehicle { get; protected set; }

        /// <summary> The price of purchasing a squadron-researchable vehicle (see <see cref="IVehicle.IsSquadronVehicle"/>) after most of the progress towards its unlocking is made. </summary>
        [Property()] public virtual int? DiscountedPurchaseCostInGoldAsSquadronVehicle { get; protected set; }

        #region Crew

        /// <summary> The crew train cost in Silver Lions that has to be paid before a vehicle can be put into a crew slot (except for reserve vehicles). </summary>
        [Property()] public virtual int BaseCrewTrainCostInSilver { get; protected set; }

        /// <summary> The expert crew train cost in Silver Lions. </summary>
        [Property()] public virtual int ExpertCrewTrainCostInSilver { get; protected set; }

        /// <summary> The base cost of ace crew training in Golden Eagles. </summary>
        [Property()] public virtual int AceCrewTrainCostInGold { get; protected set; }

        /// <summary> The amount of research generated by the vehicle to unlock ace crew qualification for free. </summary>
        [Property()] public virtual int AceCrewTrainCostInResearch { get; protected set; }

        #endregion Crew
        #region Modifications

        /// <summary> The price of purchasing backup sorties for the vehicle (consumable once a match on a vehicle by vehicle basis) with Golden Eagles (a piece). </summary>
        [Property()] public virtual int BackupSortieCostInGold { get; protected set; }

        #endregion Modifications
        #region Repairs

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY, ALL PREMIUM (NON-GIFT) VEHICLES HAVE IT] </summary>
        [Property()] public virtual int? FreeRepairs { get; protected set; }

        #endregion Repairs
        #region Rewards

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal ResearchRewardMultiplier { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal GroundKillRewardMultiplier { get; protected set; }

        #endregion Rewards

        #endregion Persistent Properties
        #region Association Properties

        /// <summary> The vehicle the data set belongs to. </summary>
        [ManyToOne(0, Column = ETable.Vehicle + "_" + EColumn.Id, ClassType = typeof(Vehicle), NotNull = true, Lazy = Laziness.Proxy)]
        [Key(1, Unique = true, Column = ETable.Vehicle + "_" + EColumn.Id)]
        public override IVehicle Vehicle { get; protected set; }

        #region Repairs

        /// <summary>
        /// The full time needed for the vehicle to be repaired for free while being in the currently selected preset.
        /// Reserve vehicles don't need repairs.
        /// </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Decimal.RepairTimeWithCrew), PropertyRef = nameof(VehicleGameModeParameterSet.Decimal.RepairTimeWithCrew.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Decimal.RepairTimeWithCrew RepairTimeWithCrew { get; protected set; }

        /// <summary>
        /// The full time needed for the vehicle to be repaired for free while not being in the currently selected preset.
        /// Reserve vehicles don't need repairs.
        /// </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Decimal.RepairTimeWithoutCrew), PropertyRef = nameof(VehicleGameModeParameterSet.Decimal.RepairTimeWithoutCrew.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Decimal.RepairTimeWithoutCrew RepairTimeWithoutCrew { get; protected set; }

        /// <summary>
        /// The full Silver Lion cost for repairing or auto-repairing the vehicle.
        /// Reserve vehicles don't need repairs.
        /// </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Integer.RepairCost), PropertyRef = nameof(VehicleGameModeParameterSet.Integer.RepairCost.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Integer.RepairCost RepairCost { get; protected set; }

        #endregion Repairs
        #region Rewards

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Integer.BattleTimeReward), PropertyRef = nameof(VehicleGameModeParameterSet.Integer.BattleTimeReward.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Integer.BattleTimeReward BattleTimeReward { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Integer.AverageReward), PropertyRef = nameof(VehicleGameModeParameterSet.Integer.AverageReward.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Integer.AverageReward AverageReward { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Decimal.RewardMultiplier), PropertyRef = nameof(VehicleGameModeParameterSet.Decimal.RewardMultiplier.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Decimal.RewardMultiplier RewardMultiplier { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Decimal.VisualRewardMultiplier), PropertyRef = nameof(VehicleGameModeParameterSet.Decimal.VisualRewardMultiplier.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Decimal.VisualRewardMultiplier VisualRewardMultiplier { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Decimal.VisualPremiumRewardMultiplier), PropertyRef = nameof(VehicleGameModeParameterSet.Decimal.VisualPremiumRewardMultiplier.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Decimal.VisualPremiumRewardMultiplier VisualPremiumRewardMultiplier { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [OneToOne(ClassType = typeof(VehicleGameModeParameterSet.Decimal.BattleTime), PropertyRef = nameof(VehicleGameModeParameterSet.Decimal.BattleTime.Entity), Lazy = Laziness.Proxy)]
        public virtual VehicleGameModeParameterSet.Decimal.BattleTime BattleTime { get; protected set; }

        #endregion Rewards

        #endregion Association PropertiesConstructors
        #region Constructors

        /// <summary> This constructor is used by NHibernate to instantiate an entity read from a database. </summary>
        protected VehicleEconomyData()
        {
        }

        /// <summary> Creates a data set. </summary>
        /// <param name="dataRepository"> A data repository to persist the object with. </param>
        /// <param name="vehicle"> The vehicle this data set belongs to. </param>
        /// <param name="instanceDerializedFromJson"> A non-persistent instance deserialized from JSON data to initialize this instance with. </param>
        public VehicleEconomyData(IDataRepository dataRepository, IVehicle vehicle, VehicleDeserializedFromJsonWpCost instanceDerializedFromJson)
            : this(dataRepository, -1L, vehicle)
        {
            InitializeGameModeParameterSets();
            InitializeWithDeserializedVehicleDataJson(instanceDerializedFromJson);
        }

        /// <summary> Creates a data set. </summary>
        /// <param name="dataRepository"> A data repository to persist the object with. </param>
        /// <param name="id"> The objects's ID. </param>
        /// <param name="vehicle"> The vehicle this data set belongs to. </param>
        public VehicleEconomyData(IDataRepository dataRepository, long id, IVehicle vehicle)
            : base(dataRepository, id, vehicle)
        {
            LogCreation();
        }

        #endregion Constructors
        #region Methods: Initialization

        /// <summary> Initializes game mode parameter sets. </summary>
        public virtual void InitializeGameModeParameterSets()
        {
            AverageReward = new VehicleGameModeParameterSet.Integer.AverageReward(_dataRepository, this);
            BattleTime = new VehicleGameModeParameterSet.Decimal.BattleTime(_dataRepository, this);
            BattleTimeReward = new VehicleGameModeParameterSet.Integer.BattleTimeReward(_dataRepository, this);
            RepairCost = new VehicleGameModeParameterSet.Integer.RepairCost(_dataRepository, this);
            RepairTimeWithCrew = new VehicleGameModeParameterSet.Decimal.RepairTimeWithCrew(_dataRepository, this);
            RepairTimeWithoutCrew = new VehicleGameModeParameterSet.Decimal.RepairTimeWithoutCrew(_dataRepository, this);
            RewardMultiplier = new VehicleGameModeParameterSet.Decimal.RewardMultiplier(_dataRepository, this);
            VisualPremiumRewardMultiplier = new VehicleGameModeParameterSet.Decimal.VisualPremiumRewardMultiplier(_dataRepository, this);
            VisualRewardMultiplier = new VehicleGameModeParameterSet.Decimal.VisualRewardMultiplier(_dataRepository, this);
        }

        /// <summary> Fills properties of the object with values deserialized from JSON data read from "wpcost.blkx". </summary>
        /// <param name="deserializedVehicle"> The temporary non-persistent object storing deserialized data. </param>
        protected virtual void InitializeWithDeserializedVehicleDataJson(VehicleDeserializedFromJsonWpCost deserializedVehicle)
        {
            InitializeWithDeserializedJson(deserializedVehicle);

            BackupSortieCostInGold = deserializedVehicle.BackupSortie.PurchaseCostInGold;

            ConsolidateGameModeParameterPropertiesIntoSets(deserializedVehicle);
        }

        #region Methods: Initialization Helpers

        /// <summary> Consolidates values of JSON properties for <see cref="EGameMode"/> parameters into sets defined in the persistent class. </summary>
        /// <param name="instanceDeserializedFromJson"> The temporary non-persistent object storing deserialized data. </param>
        private void ConsolidateGameModeParameterPropertiesIntoSets(VehicleDeserializedFromJsonWpCost instanceDeserializedFromJson)
        {
            var parameterSets = new Dictionary<string, VehicleGameModeParameterSetBase>
            {
                { nameof(AverageReward), AverageReward },
                { nameof(BattleTime), BattleTime },
                { nameof(BattleTimeReward), BattleTimeReward },
                { nameof(RepairCost), RepairCost },
                { nameof(RepairTimeWithCrew), RepairTimeWithCrew },
                { nameof(RepairTimeWithoutCrew), RepairTimeWithoutCrew },
                { nameof(RewardMultiplier), RewardMultiplier },
                { nameof(VisualPremiumRewardMultiplier), VisualPremiumRewardMultiplier },
                { nameof(VisualRewardMultiplier), VisualRewardMultiplier },
            };
            ConsolidateGameModeParameterPropertiesIntoSets(parameterSets, instanceDeserializedFromJson);
        }

        #endregion Methods: Initialization Helpers

        #endregion Methods: Initialization
        #region Methods: Overrides

        /// <summary> Returns all persistent objects nested in the instance. This method requires overriding implementation to function. </summary>
        /// <returns></returns>
        public override IEnumerable<IPersistentObject> GetAllNestedObjects()
        {
            var nestedObjects = new List<IPersistentObject>()
            {
                AverageReward,
                BattleTime,
                BattleTimeReward,
                RepairCost,
                RepairTimeWithCrew,
                RepairTimeWithoutCrew,
                RewardMultiplier,
                VisualPremiumRewardMultiplier,
                VisualRewardMultiplier,
            };

            return nestedObjects;
        }

        #endregion Methods: Overrides
    }
}