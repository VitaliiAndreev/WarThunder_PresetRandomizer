using Core.DataBase.Helpers.Interfaces;
using Core.DataBase.WarThunder.Objects.Interfaces;
using Core.DataBase.WarThunder.Objects.Json;
using Core.Enumerations.DataBase;
using NHibernate.Mapping.Attributes;
using System;

namespace Core.DataBase.WarThunder.Objects
{
    /// <summary> A vehicle (air, ground, or sea). </summary>
    [Class(Table = ETable.Vehicle)]
    public class Vehicle : PersistentObjectWithIdAndGaijinId, IVehicle
    {
        #region Constants

        /// <summary> The formatting string for output of <see cref="BattleRatingInArcade"/>, <see cref="BattleRatingInRealistic"/>, or <see cref="BattleRatingInSimulator"/>. </summary>
        protected const string _battleRatingFormat = "#.0";

        /// <summary> The regular experession matching <see cref="_battleRatingFormat"/> to check validity of <see cref="BattleRatingInArcade"/>, <see cref="BattleRatingInRealistic"/>, and <see cref="BattleRatingInSimulator"/> values. </summary>
        public const string BattleRatingRegExPattern = "[1-9]{1}[0-9]{0,}.[037]{1}";

        #endregion Constants
        #region Persistent Properties

        #region Crew

        /// <summary> The crew train cost in Silver Lions that has to be paid before a vehicle can be put into a crew slot (except for reserve vehicles). </summary>
        [Property()] public virtual int BaseCrewTrainCostInSilver { get; protected set; }

        /// <summary> The expert crew train cost in Silver Lions. </summary>
        [Property()] public virtual int ExpertCrewTrainCostInSilver { get; protected set; }

        /// <summary> The base cost of ace crew training in Golden Eagles. </summary>
        [Property()] public virtual int AceCrewTrainCostInGold { get; protected set; }

        /// <summary> The amount of research generated by the vehicle to unlock ace crew qualification for free. </summary>
        [Property()] public virtual int AceCrewTrainCostInResearch { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int CrewCount { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int GunnersCount { get; protected set; }

        #endregion Crew
        #region General

        /// <summary> The vehicle's ID. </summary>
        [Id(Column = EColumn.Id, TypeType = typeof(Guid), Name = nameof(Id))]
        public override Guid Id { get; protected set; }

        /// <summary> The vehicle's Gaijin ID. </summary>
        [Property(NotNull = true, Unique = true)]
        public override string GaijinId { get; protected set; }

        /// <summary> The vehicle's nation. </summary>
        [Property()] public virtual string Nation { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual string MoveType { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual string Class { get; protected set; }

        /// <summary> Whether this vehicle is hidden. </summary>
        [Property()] public virtual bool? ShowOnlyWhenBought { get; protected set; }

        /// <summary> The amount of research required to unlock the vehicle. </summary>
        [Property()] public virtual int? UnlockCostInResearch { get; protected set; }

        /// <summary>
        /// The price of purchasing the vehicle with Silver Lions.
        /// Zero means that the vehicle cannot be bought for Silver Lions.
        /// </summary>
        [Property()] public virtual int PurchaseCostInSilver { get; protected set; }

        /// <summary> The price of purchasing the vehicle with Golden Eagles. </summary>
        [Property()] public virtual int? PurchaseCostInGold { get; protected set; }

        /// <summary> The vehicle that has to be researched / unlocked before this one can be purchased. </summary>
        [Property()] public virtual string VehicleRequired { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual string SpawnType { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY, NULL VALUES SEEM TO MEAN 1 YET THERE ARE EXPLICIT ONES] </summary>
        [Property()] public virtual int? NumberOfSpawnsInSimulation { get; protected set; }

        #endregion General
        #region Graphics

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual string CustomClassIco { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual string CustomImage { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual string CustomTooltipImage { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual string CommonWeaponImage { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int? BulletsIconParam { get; protected set; }

        #endregion Graphics
        #region Modifications

        /// <summary> The modification that is considered an upgrade of the vehicle's armaments. </summary>
        [Property()] public virtual string WeaponUpgrade1 { get; protected set; }

        /// <summary> The modification that is considered an upgrade of the vehicle's armaments. </summary>
        [Property()] public virtual string WeaponUpgrade2 { get; protected set; }

        /// <summary> The modification that is considered an upgrade of the vehicle's armaments. </summary>
        [Property()] public virtual string WeaponUpgrade3 { get; protected set; }

        /// <summary>
        /// [NOT VISUALLY USED IN GAME CLIENT]
        /// The amount of researched modifications of the zeroth tier required to unlock modifications of the first tier.
        /// </summary>
        [Property()] public virtual int AmountOfModificationsResearchedIn_Tier0_RequiredToUnlock_Tier1 { get; protected set; }

        /// <summary> The amount of researched modifications of the first tier required to unlock modifications of the second tier. </summary>
        [Property()] public virtual int AmountOfModificationsResearchedIn_Tier1_RequiredToUnlock_Tier2 { get; protected set; }

        /// <summary> The amount of researched modifications of the second tier required to unlock modifications of the third tier. </summary>
        [Property()] public virtual int AmountOfModificationsResearchedIn_Tier2_RequiredToUnlock_Tier3 { get; protected set; }

        /// <summary> The amount of researched modifications of the third tier required to unlock modifications of the fourth tier. </summary>
        [Property()] public virtual int AmountOfModificationsResearchedIn_Tier3_RequiredToUnlock_Tier4 { get; protected set; }

        #endregion Modifications
        #region Rank

        /// <summary> The vehicle's research rank. </summary>
        [Property()] public virtual int Rank { get; protected set; }

        /// <summary> [OBSOLETE, NOW AN INTERNAL VALUE] The vehicle's rank (the predecessor of the <see cref="BattleRatingInArcade"/>) in Arcade Battles. The battle rating is being calculated from it. </summary>
        [Property()] public virtual int EconomicRankInArcade { get; protected set; }

        /// <summary> [OBSOLETE, NOW AN INTERNAL VALUE] The vehicle's rank (the predecessor of the <see cref="BattleRatingInRealistic"/>) in Realistic Battles. The battle rating is being calculated from it. </summary>
        [Property()] public virtual int EconomicRankInRealistic { get; protected set; }

        /// <summary> The value used for matchmaking (falling into a ± 1.0 battle rating bracket) in Arcade Battles. </summary>
        public virtual string BattleRatingInArcade { get => GetBattleRating(EconomicRankInArcade).ToString(_battleRatingFormat); protected set { } }

        /// <summary> The value used for matchmaking (falling into a ± 1.0 battle rating bracket) in Realistic Battles. </summary>
        public virtual string BattleRatingInRealistic { get => GetBattleRating(EconomicRankInArcade).ToString(_battleRatingFormat); protected set { } }

        #endregion Rank
        #region Repairs

        /// <summary> The full time needed for the vehicle to be repaired for free while being in the currently selected preset in Arcade Battles. </summary>
        [Property()] public virtual decimal RepairTimeWithCrewInArcade { get; protected set; }

        /// <summary> The full time needed for the vehicle to be repaired for free while being in the currently selected preset in Realistic Battles. </summary>
        [Property()] public virtual decimal RepairTimeWithCrewInRealistic { get; protected set; }

        /// <summary> The full time needed for the vehicle to be repaired for free while being in the currently selected preset in Simulator Battles. </summary>
        [Property()] public virtual decimal RepairTimeWithCrewInSimulation { get; protected set; }

        /// <summary> The full time needed for the vehicle to be repaired for free while not being in the currently selected preset in Arcade Battles. </summary>
        [Property()] public virtual decimal RepairTimeWithoutCrewInArcade { get; protected set; }

        /// <summary> The full time needed for the vehicle to be repaired for free while not being in the currently selected preset in Realistic Battles. </summary>
        [Property()] public virtual decimal RepairTimeWithoutCrewInRealistic { get; protected set; }

        /// <summary> The full time needed for the vehicle to be repaired for free while not being in the currently selected preset in Simulator Battles. </summary>
        [Property()] public virtual decimal RepairTimeWithoutCrewInSimulation { get; protected set; }

        /// <summary> The full Silver Lion cost for repairing or auto-repairing the vehicle in Arcade Battles. </summary>
        [Property()] public virtual int RepairCostInArcade { get; protected set; }

        /// <summary> The full Silver Lion cost for repairing or auto-repairing the vehicle in Realistic Battles. </summary>
        [Property()] public virtual int RepairCostInRealistic { get; protected set; }

        /// <summary> The full Silver Lion cost for repairing or auto-repairing the vehicle in Simulator Battles. </summary>
        [Property()] public virtual int RepairCostInSimulation { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY, ALL PREMIUM (NON-GIFT) VEHICLES HAVE IT] </summary>
        [Property()] public virtual int? FreeRepairs { get; protected set; }

        #endregion Repairs
        #region Rewards

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int BattleTimeAwardInArcade { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int BattleTimeAwardInRealistic { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int BattleTimeAwardInSimulation { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int AverageAwardInArcade { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int AverageAwardInRealistic { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual int AverageAwardInSimulation { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal RewardMultiplierInArcade { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal RewardMultiplierInRealistic { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal RewardMultiplierInSimulation { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal VisualRewardMultiplierInArcade { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal VisualRewardMultiplierInRealistic { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal VisualRewardMultiplierInSimulation { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal ResearchRewardMultiplier { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal GroundKillRewardMultiplier { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal BattleTimeArcade { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal BattleTimeRealistic { get; protected set; }

        /// <summary> [THERE IS NO FULL UNDERSTANDING OF THIS PROPERTY] </summary>
        [Property()] public virtual decimal BattleTimeSimulation { get; protected set; }

        #endregion Rewards

        #endregion Persistent Properties
        #region Constructors

        /// <summary>
        /// Creates a new transient object that can be persisted later.
        /// This constructor is used by NHibernate to instantiate deserialized data read from a database.
        /// </summary>
        protected Vehicle()
        {
        }

        /// <summary> Creates a new nation. </summary>
        /// <param name="dataRepository"> A data repository to persist the object with. </param>
        /// <param name="gaijinId"> The nation's Gaijin ID. </param>
        public Vehicle(IDataRepository dataRepository, string gaijinId)
            : this(dataRepository, Guid.NewGuid(), gaijinId)
        {
        }

        /// <summary> Creates a new nation. </summary>
        /// <param name="dataRepository"> A data repository to persist the object with. </param>
        /// <param name="instanceSerializedFromJson"> A non-persistent instance serialized from JSON data to initialize this instance with. </param>
        public Vehicle(IDataRepository dataRepository, VehicleDeserializedFromJson instanceSerializedFromJson)
            : this(dataRepository, Guid.NewGuid(), instanceSerializedFromJson.GaijinId)
        {
            InitializeWithDeserializedJson(instanceSerializedFromJson);
        }

        /// <summary> Creates a new nation. </summary>
        /// <param name="dataRepository"> A data repository to persist the object with. </param>
        /// <param name="id"> The nation's ID. </param>
        /// <param name="gaijinId"> The nation's Gaijin ID. </param>
        public Vehicle(IDataRepository dataRepository, Guid id, string gaijinId)
            : base(dataRepository, id, gaijinId)
        {
            LogCreation();
        }

        #endregion Constructors

        /// <summary> Calculates the vehicle's battle rating from the obsolete <see cref="EconomicRankInArcade"/>, <see cref="EconomicRankInRealistic"/>, or <see cref="EconomicRankInSimulation"/>. </summary>
        /// <param name="economicRank"> The vehicle's <see cref="EconomicRankInArcade"/>, <see cref="EconomicRankInRealistic"/>, or <see cref="EconomicRankInSimulation"/> to calculate the battle rating from. </param>
        /// <returns></returns>
        protected virtual decimal GetBattleRating(int economicRank) => economicRank / 3 + 1;
    }
}
